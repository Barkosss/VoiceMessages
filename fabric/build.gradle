plugins {
    id 'com.gradleup.shadow'
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "maven.modrinth:simple-voice-chat:fabric-${rootProject.voicechat_mod_version}"

    include(modImplementation("me.lucko:fabric-permissions-api:${rootProject.fabric_permissions_api_version}"))
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

// Defined in user gradle.properties
String modrinthToken = property("modrinth_forminotaur_token")

if (modrinthToken) {
    modrinth {
        token = modrinthToken
        projectId = "voicemessages"
        versionNumber = rootProject.mod_version
        versionType = "release" // This is the default -- can also be `beta` or `alpha`
        uploadFile = remapJar
        gameVersions = [minecraft_version] // Must be an array, even with only one version
        dependencies { // A special DSL for creating dependencies
            // scope.type
            // The scope can be `required`, `optional`, `incompatible`, or `embedded`
            // The type can either be `project` or `version`
            required.project "fabric-api"
            required.project "simple-voice-chat"
        }
        changelog = providers.fileContents(parent.layout.projectDirectory.file("changelog.md")).asText.get()
    }
}
